//
//  AnecdoteSession.swift
//  Fabula
//
//  Created by RaphaÃ«l Goupille on 12/02/2022.
//

//import Foundation
//import FirebaseFirestore

//class AnecdoteSession: FireStoreSession {
//    
//
//    var lastSnapshot: QueryDocumentSnapshot?
//    
//    let dataBase = Firestore.firestore()
//
//    func getDocuments(dataRequest: String, callback: @escaping ([[String : Any]]?, NetworkError?) -> Void) {
//        let docRef = dataBase.collection(dataRequest).order(by: "date", descending: true).limit(to: 5)
//         
//         
//         docRef.getDocuments { snapshot, error in
//             guard let data = snapshot?.documents, error == nil else {
//                 callback(nil, NetworkError.errorOccured)
//                 return
//             }
//             
//             if snapshot?.metadata.isFromCache == true {
//                 callback(nil, NetworkError.noConnection)
//             }
//             
//             var dictionnary = [[String: Any]]()
//             for x in 0 ..< data.count {
//                 var anecdoteDict = data[x].data()
//                 // get the id of the document generated by firebase
//                 let id = data[x].documentID as Any
//                 anecdoteDict["id"] = id
//                 // convert the date in Date
//                 let fireDate = (data[x].data()["date"] as? Timestamp)?.dateValue() ?? Date()
//                 anecdoteDict["Date"] = fireDate
//                 dictionnary.append(anecdoteDict)
//             }
//             
//             print("Dictionnary : \(dictionnary)")
//             callback(dictionnary, nil)
//
//             self.lastSnapshot = snapshot?.documents.last
//         }
//    }
//
//    
//    func getNewDocuments(dataRequest: String, callback: @escaping ([[String : Any]]?, NetworkError?) -> Void) {
//        
//        print("GET NEW DOCUMENT IS CALLED")
//        print("LAST SNAPSHOT = \(lastSnapshot)")
//        guard let lastSnapshot = lastSnapshot else {
//            print("PAS DE SNAPSHOT DANS getNewDocuments Anecdote session")
//            return
//        }
//        
//        let docRef = dataBase.collection(dataRequest).order(by: "date", descending: true).limit(to: 5).start(afterDocument: lastSnapshot)
//        
//        docRef.getDocuments { snapshot, error in
//            guard let data = snapshot?.documents, error == nil else {
//                callback(nil, NetworkError.errorOccured)
//                print("ERROR getNewDocuments Session")
//                return
//            }
//            
//            if snapshot?.metadata.isFromCache == true {
//                callback(nil, NetworkError.noConnection)
//            }
//            
//            var dictionnary = [[String: Any]]()
//            for x in 0 ..< data.count {
//                var anecdoteDict = data[x].data()
//                // get the id of the document generated by firebase
//                let id = data[x].documentID as Any
//                anecdoteDict["id"] = id
//                // convert the date in Date
//                let fireDate = (data[x].data()["date"] as? Timestamp)?.dateValue() ?? Date()
//                anecdoteDict["Date"] = fireDate
//                dictionnary.append(anecdoteDict)
//            }
//            callback(dictionnary, nil)
//
//            self.lastSnapshot = snapshot?.documents.last
//            
////            var dictionnary = [[String: Any]]()
////            for x in 0 ..< data.count {
////                dictionnary.append(data[x].data())
////
////                callback(dictionnary, nil)
////
////                self.lastSnapshot = snapshot?.documents.last
////            }
////            var dictionnary = [[String: Any]]()
////            for x in 0 ..< data.count {
////                var anecdoteDict = data[x].data()
////                // get the id of the document generated by firebase
////                let id = data[x].documentID as Any
////                anecdoteDict["id"] = id
////                // convert the date in Date
////                let fireDate = (data[x].data()["date"] as? Timestamp)?.dateValue() ?? Date()
////                anecdoteDict["Date"] = fireDate
////                dictionnary.append(anecdoteDict)
////            }
////
////            print("Dictionnary : \(dictionnary)")
////            callback(dictionnary, nil)
////
////            self.lastSnapshot = snapshot?.documents.last
//        }
//    }
//       
//    
//    func getAllDocuments(dataRequest: String, callback: @escaping ([[String : Any]]?, NetworkError?) -> Void) {
//        let docRef = dataBase.collection(dataRequest).order(by: "date", descending: true)
//         
//         
//         docRef.getDocuments { snapshot, error in
//             guard let data = snapshot?.documents, error == nil else {
//                 callback(nil, NetworkError.errorOccured)
//                 return
//             }
//             
//             if snapshot?.metadata.isFromCache == true {
//                 callback(nil, NetworkError.noConnection)
//             }
//             
//             var dictionnary = [[String: Any]]()
//             for x in 0 ..< data.count {
//                 var anecdoteDict = data[x].data()
//                 // get the id of the document generated by firebase
//                 let id = data[x].documentID as Any
//                 anecdoteDict["id"] = id
//                 // convert the date in Date
//                 let fireDate = (data[x].data()["date"] as? Timestamp)?.dateValue() ?? Date()
//                 anecdoteDict["Date"] = fireDate
//                 dictionnary.append(anecdoteDict)
//             }
//             
//             print("Dictionnary : \(dictionnary)")
//             callback(dictionnary, nil)
//         }
//    }
//    
//    func getUserInfo(dataRequest: String, userId: String, callback: @escaping ([String: Any]?, NetworkError?) -> Void) {
//        let docRef = dataBase.collection(dataRequest).whereField("userId", isEqualTo: userId)
//        
//        docRef.getDocuments { snapshot, error in
//            guard let data = snapshot?.documents
//                    , error == nil else {
//                        callback(nil, NetworkError.errorOccured)
//                        return
//                    }
//            
//            let dictionary = data[0].data()
////            let user = User(userName: dictionary["userName"] as! String, userId: dictionary["userId"] as! String, userEmail: dictionary["userEmail"] as! String)
//            
//            callback(dictionary, nil)
//        }
//    }
//    
//    func readComments(dataRequest: String, anecdoteId: String, callback: @escaping ([[String : Any]]?, NetworkError?) -> Void) {
//        
//        var firestoreResult = [[String: Any]]()
//        
//        let docRef = dataBase.collection(dataRequest).whereField("anecdoteId", isEqualTo: anecdoteId)
//        
//        docRef.getDocuments { snapshot, error in
//            guard let data = snapshot?.documents
//                    , error == nil else {
//                        callback(nil, NetworkError.errorOccured)
//                        return
//                    }
//            print(data)
//            for i in 0 ..< data.count {
//                var dictionary = data[i].data()
//                let fireDate = (data[i].data()["date"] as? Timestamp)?.dateValue() ?? Date()
//                dictionary["date"] = fireDate
//                firestoreResult.append(dictionary)
//            }
//            callback(firestoreResult, nil)
//        }
//        
//    }
//    
//    
//}
//    
//
